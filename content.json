{"meta":{"title":"jackercc","subtitle":null,"description":null,"author":"jackercc","url":"http://jacker.cc"},"pages":[],"posts":[{"title":"开发机方式开发，使用vscode配置sftp插件试试同步本地代码到远程开发机服务器地址","slug":"开发机方式开发，使用vscode配置sftp插件试试同步本地代码到远程开发机服务器地址","date":"2018-03-29T15:18:00.000Z","updated":"2018-03-29T15:26:53.300Z","comments":true,"path":"2018/03/29/开发机方式开发，使用vscode配置sftp插件试试同步本地代码到远程开发机服务器地址/","link":"","permalink":"http://jacker.cc/2018/03/29/开发机方式开发，使用vscode配置sftp插件试试同步本地代码到远程开发机服务器地址/","excerpt":"","text":"安装sftp插件 ctrl+shift+P进入命令面板，输入：SFTP:Config 点击执行 在项目下生成.vscode文件夹及sftp.json配置文件： sftp.json 配置如下：12345678910111213141516&#123; \"protocol\": \"sftp\", \"host\": \"10.96.141.76\", \"username\": \"liubeibei\", \"password\": \"www.imooc.com\", \"remotePath\": \"/data/devhome/liubeibei/class/php\",// 本地保存时自动上传到开发机服务器 \"uploadOnSave\": true, \"downloadOnOpen\": true, \"ignore\": [ \"**/.vscode/**\", \"**/.git/**\", \"**/.DS_Store\", \"**/.gitignore\" ]&#125;","categories":[],"tags":[{"name":"VSCode","slug":"VSCode","permalink":"http://jacker.cc/tags/VSCode/"}]},{"title":"SVN常用命令","slug":"SVN常用命令","date":"2018-03-29T15:07:31.000Z","updated":"2018-03-29T15:15:50.177Z","comments":true,"path":"2018/03/29/SVN常用命令/","link":"","permalink":"http://jacker.cc/2018/03/29/SVN常用命令/","excerpt":"","text":"常用命令svn helpsvn –versionsvn –version –quiet 只显示版本号svn checkout 地址svn add 文件或者文件夹 增加本地数据到服务器svn commit / svn ci -m “注释” 文件名 提交代码，要先add才commitsvn update / svn up 不必跟特定的文件或目录，也可以自己指定需要更新的文件或目录。每次commit或者改动之前最好更新一下。svn logsvn delete 文件名svn resolve 路径 –accept working 解决冲突http://zccst.iteye.com/blog/1765519svn switch 远程路径 版本切换svn list 路径 / svn ls 列出版本库下的文件和目录svn merge -r m:n 路径 合并文件，从版本号m到版本号n的远程分支都合并到当前分支中svn info 确认工作目录的svn信息svn diff -r m:n 路径 对版本m和版本n比较差异svn cleanup 为失败的失误清场svn status -v 在本地进行代码修改，检查修改状态svn import 远程路径 –message “message” 将当前路径下文件导入到版本库中svn export 远程路径 导出一份干净的项目svn move/ svn mv 原文件名 新文件名 重命名svn mkdir 文件名svn copy / svn cp 源文件路径 新文件路径svn revert 文件名 只能恢复未提交之前的操作若要还原已提交的改动：只能用旧文件覆盖新文件。操作如下： 1）sun up 让本地工作拷贝更新到最新状态 2）svn log your_file_path 查看文件日志，这时候提交时填写的说明信息就派上用场了 3）svn diff -r 旧修订版序号:新修订版序号 your_file_path 查看两个修订版之间的不同。 4）决定用哪个旧的修订版号后，用旧的修订版号文件覆盖新的修订版号文件。svn merge -r 新修订版序号:旧修订版序号 your_file_path 5）svn commit -m “恢复到某修订版（某修订版作废）”本地的版本叫做working copy 关于mergebranch主要用于新功能的开发 合并发生在本地working copy，只要你不提交就不会影响到repository 合并前一定要先update、commit，保证不会out of day，并将本地的修改保存到repository branch和trunk并行开发的过程中，要经常同步，将trunk的修改合并到branch，合并时选择”Merge a range of revision” branch最后合并回trunk时，merge type选择”Reintegrate a branch”不管是从trunk合并到branch还是最终从branch合并回trunk，在每次合并前最好先update，然后将本地的修改先全部commit，保护好现场，万一合并不理想随时都可以revert http://blog.csdn.net/eggcalm/article/details/6606520http://zhengkun.readthedocs.org/zh_CN/latest/2014/02/07/svn-usage/ 关于解决冲突发生冲突之后会出现三个临时文件：XXX.mine XXX.r1 XXX.r2一旦解决了冲突，需用svn resolved让subversion知道，这样就会删除这三个临时文件，冲突状态解决。三种解决方式： ● 手工合并冲突：需要将冲突标志删除 ● 用某一个临时文件覆盖自己的工作文件 ● 用svn revert 放弃本地修改，不需要执行resolved","categories":[],"tags":[{"name":"SVN","slug":"SVN","permalink":"http://jacker.cc/tags/SVN/"}]},{"title":"windows 下 nginx 的启动、停用、重启命令","slug":"nginx-doc","date":"2018-01-25T01:47:14.000Z","updated":"2018-01-25T06:50:32.361Z","comments":true,"path":"2018/01/25/nginx-doc/","link":"","permalink":"http://jacker.cc/2018/01/25/nginx-doc/","excerpt":"","text":"启动直接点击Nginx目录下的nginx.exe 或者 cmd运行start nginx 关闭nginx -s stop 或者 nginx -s quit stop表示立即停止nginx,不保存相关信息 quit表示正常退出nginx,并保存相关信息 重启(因为改变了配置,需要重启)nginx -s reload","categories":[],"tags":[{"name":"nginx","slug":"nginx","permalink":"http://jacker.cc/tags/nginx/"}]},{"title":"Linux常用的Shell命令","slug":"Linux常用的Shell命令","date":"2018-01-14T02:03:23.000Z","updated":"2018-01-26T08:55:15.634Z","comments":true,"path":"2018/01/14/Linux常用的Shell命令/","link":"","permalink":"http://jacker.cc/2018/01/14/Linux常用的Shell命令/","excerpt":"","text":"一、文件、目录操作命令1、ls命令功能：显示文件和目录的信息 ls 以默认方式显示当前目录文件列表 ls -a 显示所有文件包括隐藏文件 ls -l 显示文件属性，包括大小，日期，符号连接，是否可读写及是否可执行 ls -lh 显示文件的大小，以容易理解的格式印出文件大小 (例如 1K 234M2G) ls -lt 显示文件，按照修改时间排序 2、cd命令功能：改名目录 cd dir 切换到当前目录下的dir目录 cd / 切换到根目录 cd .. 切换到到上一级目录 cd ../.. 切换到上二级目录 cd ~ 切换到用户目录，比如是root用户，则切换到/root下 3、cp命令功能：copy文件 cp source target 将文件source复制为target cp /root /source. 将/root下的文件source复制到当前目录 cp –av soure_dir target_dir 将整个目录复制，两目录完全一样 4、rm命令功能：删除文件或目录 rm file 删除某一个文件 rm -f file 删除时候不进行提示。可以于r参数配合使用 rm -rf dir 删除当前目录下叫dir的整个目录 5、mv命令功能：将文件移动走，或者改名，在uinx下面没有改名的命令，如果想改名，可以使用该命令 mv source target 将文件source更名为target 6、diff功能：比较文件内容 diff dir1 dir2 比较目录1与目录2的文件列表是否相同，但不比较文件的实际内容，不同则列出 diff file1 file2 比较文件1与文件2的内容是否相同，如果是文本格式的文件，则将不相同的内容显示，如果是二进制代码则只表示两个文件是不同的 comm file1 file2 比较文件，显示两个文件不相同的内容 7、ln命令功能：建立链接。windows的快捷方式就是根据链接的原理来做的 ln source_path target_path 硬连接 ln -s source_path target_path 软连接 二、查看文件内容命令1、cat命令显示文件的内容，和DOS的type相同 cat file 2、more命令功能：分页显示命令 more file more命令也可以通过管道符(|)与其他的命令一起使用,例如： ps ux|more ls|more 3、tail 命令功能：显示文件的最后几行 tail -n 100 aaa.txt 显示文件aaa.txt文件的最后100行 4、vi命令vi file 编辑文件file vi 原基本使用及命令： 输入命令的方式为先按[ESC]键，然后输入:w(写入文件),:w!(不询问方式写入文件）,:wq保存并退出,:q退出,q!不保存退出 5、touch命令功能：创建一个空文件 touch aaa.txt 创建一个空文件，文件名为aaa.txt 三、基本系统命令1、man命令功能：查看某个命令的帮助，如果你不知道某个命令的用法不懂，可以问他，他知道就回告诉你 例如： man ls 显示ls命令的帮助内容 2、w命令功能：显示登录用户的详细信息 例如： Sarge:~# w 22:06:51 up 43 min, 1 user, load average: 0.00, 0.00, 0.00 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT zhoulj pts/0 10.140.0.109 21:24 0.00s 0.85s 0.09s sshd: zhoulj [priv] 3、who命令功能：显示登录用户 例如： Sarge:~# who zhoulj pts/0 Mar 13 21:24 (10.140.0.109) 4、last命令功能：查看最近那些用户登录系统 例如： Sarge:~# last zhoulj pts/0 10.140.0.109 Mon Mar 13 21:24 still logged in reboot system boot 2.6.8-2-386 Mon Mar 13 21:23 (00:43) zhoulj pts/0 10.140.0.105 Sun Mar 12 22:51 - down (00:00) zhoulj pts/0 10.140.0.105 Sun Mar 12 22:51 - 22:51 (00:00) root tty1 Sun Mar 12 22:50 - down (00:01) root tty1 Sun Mar 12 22:46 - 22:48 (00:02) root tty1 Sun Mar 12 22:43 - 22:46 (00:02) reboot system boot 2.6.8-2-386 Mon Mar 13 06:34 (-7:-41) wtmp begins Mon Mar 13 06:34:11 2006 5、date命令功能：系统日期设定 date 显示当前日期时间 date -s 20:30:30 设置系统时间为20:30:30 date -s 2002-3-5 设置系统时期为2003-3-5 date -s “060520 06:00:00” 设置系统时期为2006年5月20日6点整。 6、clock命令功能：时钟设置 clock –r 对系统Bios中读取时间参数 clock –w 将系统时间(如由date设置的时间)写入Bios 7、uname命令功能：查看系统版本 uname -R 显示操作系统内核的version 例如： Sarge:~# uname -a Linux Sarge 2.6.8-2-386 #1 Tue Aug 16 12:46:35 UTC 2005 i686 GNU/Linux 8、关闭和重新启动系统命令reboot 重新启动计算机 shutdown -r now 重新启动计算机，停止服务后重新启动计算机 shutdown -h now 关闭计算机，停止服务后再关闭系统 halt 关闭计算机 一般用shutdown -r now,在重启系统是，关闭相关服务，shutdown -h now也是如此。 9、su命令功能：切换用户 su - 切换到root用户 su - zhoulj 切换到zhoulj用户， 注意：- ，他很关键，使用-，将使用用户的环境变量 四、监视系统状态命令1、top命令功能：查看系统cpu、内存等使用情况 2、free命令功能：查看内存和swap分区使用情况 例如： Sarge:~# free -tm total used free shared buffers cached Mem: 187 42 145 0 6 16 -/+ buffers/cache: 19 167 Swap: 243 0 243 Total: 430 42 388 3、uptime功能：现在的时间 ，系统开机运转到现在经过的时间，连线的使用者数量，最近一分钟，五分钟和十五分钟的系统负载 例如： Sarge:~# uptime 21:54:46 up 31 min, 1 user, load average: 0.00, 0.00, 0.00 4、vmstat命令功能：监视虚拟内存使用情况 例如： $ vmstat procs memory swap io system cpu r b swpd free buff cache si so bi bo in cs us sy id wa 1 0 0 63704 8100 32272 0 0 8 3 103 17 0 1 98 1 5、ps命令功能：显示进程信息 ps ux 显示当前用户的进程 ps uxwww 显示当前用户的进程的详细信息 ps aux 显示所有用户的进程 ps ef 显示系统所有进程信息 应用 启一个node服务，关闭终端仍不终止1、nohup 命令 &amp;这样能使命令永久的在后台执行nohup 命令可以使命令永久的执行下去，和终端没有关系，退出终端也不会影响程序的运行；&amp; 是后台运行的意思，但当用户退出的时候，命令自动也跟着退出。1nohup npm run dev &amp; 2、ps aux | grep [正则匹配]1234567 [root@lbb data]# ps aux | greg noderoot 9432 0.0 0.1 875404 18400 pts/2 Sl 15:13 0:00 node /data/ifbp-element/node_modules/.bin/cooking watch -c build/cooking.demo.js -proot 9442 1.2 1.9 1453828 309320 pts/2 Sl 15:13 1:09 node /data/ifbp-element/node_modules/cooking/bin/cooking-watch -c build/cooking.demo.js -proot 10434 0.0 0.0 112660 972 pts/2 S+ 16:45 0:00 grep --color=auto node 管道符“|”，这个符号可以将一个命令的标准输出管道为另外一个命令的标准输入 grep命令是一种强大的文本搜索工具，它能使用正则表达式搜索文本，并把匹配的行打印出来 3、根据pid杀死进程，kill -9 pid1kill -9 9432 6、kill命令功能：干掉某个进程，进程号可以通过ps命令得到 kill -9 1001 将进程编号为1001的程序干掉 kill all -9 apache 将所有名字为apapche的程序杀死，kill不是万能的，对僵死的程序则无效。 五、磁盘操作命令1、df命令功能：检查文件系统的磁盘空间占用情况。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。 参数 功能 -a 列出全部目录 -Ta 列出全部目录，并且显示文件类型 -B 显示块信息 -i 以i节点列出全部目录 -h 按照日常习惯显示（如：1K、100M、20G） -x [filesystype] 不显示[filesystype] 例如： [root]# df -Th Filesystem Type Size Used Avail Use% Mounted on /dev/sda1 ext3 265M 64M 187M 26% / tmpfs tmpfs 94M 0 94M 0% /dev/shm /dev/sda6 ext3 714M 8.1M 667M 2% /home /dev/sda8 ext3 956M 215M 691M 24% /usr /dev/sda7 ext3 714M 57M 619M 9% /var 2、du命令功能：检测一个目录和（递归地）所有它的子目录中的文件占用的磁盘空间。 参数 功能 -s [dirName] 显示目录占用总空间 -sk [dirName] 显示目录占用总空间，以k为单位 -sb [dirName] 显示目录占用总空间，以b为单位 -sm [dirName] 显示目录占用总空间，以m为单位 -sc [dirName] 显示目录占用总空间，加上目录统计 -sh [dirName] 只统计目录大小 例如： [root]# du -sh /etc 1.3M /etc 3、mount命令功能：使用mount命令就可在Linux中挂载各种文件系统。 格式：mount -t 设备名 挂载点 （1）、mount /dev/sda1 /mnt/filetest mount -t vfat /dev/hda /mnt/fatfile mount -t ntfs /dev/hda /mnt/ntfsfile mount -t iso9660 /dev/cdrom /mnt/cdrom mount -o 设备名 挂载点 （2）、使用usb设备 modprobe usb-storage mkdir /mnt/usb mount -t auto /dev/sdx1 /mnt/usb umount /mnt/usb 4、mkswap命令功能：使用mkswap命令可以创建swap空间，如： debian:~# mkswap -c /dev/hda4 debian:~# swapon /dev/hda4 #启用新创建的swap空间，停用可使用swapoff命令 5、fdisk命令功能：对磁盘进行分区 fdisk /dev/xxx 格式化xxx设备(xxx是指磁盘驱动器的名字，例如hdb，sdc) fdisk -l 显示磁盘的分区表 6、mkfs命令功能：格式化文件系统，可以指定文件系统的类型，如ext2、ext3、fat、ntfs等 格式1：mkfs.ext3 options /dev/xxx 格式2：mkfs -t ext2 options /dev/xxx 参数 功能 -b 块大小 -i 节点大写 -m 预留管理空间大小 例如： debian:~#mkfs.ext3 /dev/sdb1 7、e2fsck命令功能：磁盘检测 e2fsck /dev/hda1 检查/dev/hda1是否有文件系统错误，提示修复方式 e2fsck -p /dev/hda1 检查/dev/hda1是否有错误，如果有则自动修复 e2fsck -y /dev/hda1 检查错误，所有提问均于yes方式执行 e2fsck -c /dev/hda1 检查磁盘是否有坏区 8、tune2fs命令功能：调整ext2/ext3文件的参数 参数 功能 -l 查看文件系统信息 -c 设置强制自检的挂载次数 -i 设置强制自检的间隔时间，单位天 -m 保留块的百分比 -j 将ext2文件系统转换成ext3格式 [root]# tune2fs -l /dev/sda1 9、dd命令功能：功能：把指定的输入文件拷贝到指定的输出文件中，并且在拷贝过程中可以进行格式转换。 跟DOS下的diskcopy命令的作用类似。 dd if=/dev/fd0 of=floppy.img 将软盘的内容复制成一个镜像 dd if=floppy.img of=/dev/fd0 将一个镜像的内容复制到软盘，做驱动盘的时候经常用。 六、用户和组相关命令1、groupadd命令功能：添加组 groupadd test1 添加test1组 groupadd -g 1111 test2 添加test2组，组id为1111 2、useradd命令功能：添加用户 useradd user1 添加用户user1，home为/home/user1，组为user1 useradd -g test1 -m -d /home/test1 test1 添加用户test1，home为/home/test1，组为test1 user list 显示已登陆的用户列表 3、passwd命令功能：更改用户密码 passwd user1 修改用户user1的密码 passwd -d root 将root用户的密码删除 4、userdel命令功能：删除用户 userdel user1 删除user1用户 5、chown命令功能：改变文件或目录的所有者 chown user1 /dir 将/dir目录设置为user1所有 chown -R user1.user1 /dir 将/dir目录下所有文件和目录，设置为user1所有,组为user1。-R递归到下面的每个文件和目录 6、chgrp命令功能：改变文件或目录的所有组 chgrp user1 /dir 将/dir目录设置为user1所有 7、chmod命令功能：改变用户的权限 chmod a+x file 将file文件设置为可执行，脚本类文件一定要这样设置一个，否则得用bash file才能执行 chmod 666 file 将文件file设置为可读写 chmod 750 file 将文件file设置为，所有者为完全权限，同组可以读和执行，其他无权限 8、id命令功能：显示用户的信息，包括uid、gid等 [root]# id zhoulj uid=500(zhoulj) gid=500(zhoulj) groups=500(zhoulj) 9、finger命令功能：显示用的信息 注意：debian下没有该命令。 [root]# finger zhoulj Login: zhoulj Name: Directory: /home/zhoulj Shell: /bin/bash On since Sun May 21 07:59 (CST) on pts/0 from 192.168.1.4 No mail. No Plan. 七、压缩命令1、gzip格式命令功能：压缩文件，gz格式的 注意：生成的文件会把源文件覆盖 gzip -v 压缩文件，并且显示进度 -d 解压缩 gnuzip -f 解压缩 例如： [root]# gzip a.sh #ll -rwxr-xr-x 1 root root 71 12月 18 21:08 a.sh.gz [root]# gzip -d a.sh.gz #ll -rwxr-xr-x 1 root root 48 12月 18 21:08 a.sh 2、zip格式命令功能：压缩和解压缩zip命令 zip unzip 例如： [root]# zip a.sh.zip a.sh adding: a.sh (stored 0%) [root]# ll -rw-r–r– 1 root root 188 5月 21 10:37 a.sh.zip [root]# unzip a.sh.zip Archive: a.sh.zip replace a.sh? [y]es, [n]o, [A]ll, [N]one, [r]ename: r new name: a1.sh extracting: a1.sh [root]# ll -rwxr-xr-x 1 root root 48 12月 18 21:08 a1.sh 3、bzip2根式命令功能：bzip2格式压缩命令， 注意：生成的文件会把源文件覆盖 bzip2 bunzip2 例如： [root]# bzip2 a.sh [root]# ll -rwxr-xr-x 1 root root 85 12月 18 21:08 a.sh.bz2 [root]# bunzip2 a.sh.bz2 [root]# ll -rwxr-xr-x 1 root root 48 12月 18 21:08 a.sh 4、tar命令功能：归档、压缩等，比较重要，会经常使用。 -cvf 压缩文件或目录 -xvf 解压缩文件或目录 -zcvf 压缩文件或，格式tar.gz -zxvf 解压缩文件或，格式tar.gz -zcvf 压缩文件或，格式tgz -zxvf 解压缩文件或，格式tgz 举例: [root]# tar cvf abc.tar *.sh [root]# tar xvf abc.tar [root]# tar czvf abc.tar.gz *.sh [root]# ll -rw-r–r– 1 root root 20480 5月 21 10:50 abc.tar -rw-r–r– 1 root root 1223 5月 21 10:53 abc.tar.gz [root]# tar xzvf abc.tar.gz 八、网络相关命令1、ifconfig命令功能：显示修改网卡的信息 ifconfig 显示网络信息 ifconfig eth0 显示eth0网络信息 修改网络信息： ifconfig eth0 192.168.1.1 netmask 255.255.255.0 设置网卡1的地址192.168.1.1，掩码为255.255.255.0 ifconfig eth0:1 192.168.1.2 捆绑网卡1的第二个地址为192.168.1.2 ifconfig eth0:x 192.168.1.n 捆绑网卡1的第n个地址为192.168.1.n 例如： [root]# ifconfig eth0:1 192.168.1.11 [root]# ifconfig eth0 Link encap:Ethernet HWaddr 00:0C:29:06:9C:24 inet addr:192.168.1.5 Bcast:192.168.1.255 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 RX packets:4220 errors:0 dropped:0 overruns:0 frame:0 TX packets:3586 errors:0 dropped:0 overruns:0 carrier:0 collisions:0 txqueuelen:1000 RX bytes:342493 (334.4 Kb) TX bytes:469020 (458.0 Kb) Interrupt:9 Base address:0x1400 eth0:1 Link encap:Ethernet HWaddr 00:0C:29:06:9C:24 inet addr:192.168.1.11 Bcast:192.168.1.255 Mask:255.255.255.0 UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1 Interrupt:9 Base address:0x1400 2、route命令功能：显示当前路由设置情况 route 显示当前路由设置情况，比较慢一般不用。 route add -net 10.0.0.0 netmask 255.255.0.0 gw 192.168.1.254 添加静态路由 route del -net 10.0.0.0 netmask 255.255.0.0 gw 192.168.1.254 添加静态路由 route add default gw 192.168.1.1 metric1 设置192.168.1.1为默认的路由 route del default 将默认的路由删除 举例： [root]# route add -net 10.0.0.0 netmask 255.255.0.0 gw 192.168.1.254 [root]# netstat -nr Kernel IP routing table Destination Gateway Genmask Flags MSS Window irtt Iface 192.168.1.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0 10.0.0.0 192.168.1.254 255.255.0.0 UG 0 0 0 eth0 169.254.0.0 0.0.0.0 255.255.0.0 U 0 0 0 eth0 0.0.0.0 192.168.1.254 0.0.0.0 UG 0 0 0 eth0 [root]# route del -net 10.0.0.0 netmask 255.255.0.0 gw 192.168.1.254 [root]# netstat -nr Kernel IP routing table Destination Gateway Genmask Flags MSS Window irtt Iface 192.168.1.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0 169.254.0.0 0.0.0.0 255.255.0.0 U 0 0 0 eth0 0.0.0.0 192.168.1.254 0.0.0.0 UG 0 0 0 eth0 3、netstat命令功能：显示网络状态 netstat -an 查看网络端口信息 netstat -nr 查看路由表信息，比route快多了， 4、启动网络的命令redhat族的命令: /etc/init.d/network debian命令: /etc/init.d/networking 例如： /etc/init.d/network stop 停止网络， /etc/init.d/network start 启动网络， 5、手工修改网络配置(1)、debian系统 配置文件位置为：/etc/network/interfaces [root]# The loopback network interface auto lo iface lo inet loopback [root]# The primary network interface auto eth0 eth1 iface eth0 inet static address 10.4.5.6 netmask 255.255.255.0 network 10.4.5.0 broadcast 10.4.5.255 iface eth1 inet static address 219.25.5.60 netmask 255.255.255.192 network 219.25.5.0 broadcast 219.25.5.63 gateway 219.25.5.30 修改后保存配置后，运行 /etc/init.d/networking restart 网络配置就改变了 (2)、redhat系统 配置文件位置为：/etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0 BOOTPROTO=static BROADCAST=192.168.1.255 IPADDR=192.168.1.5 NETMASK=255.255.255.0 NETWORK=192.168.1.0 GATEWAY=192.168.1.254 ONBOOT=yes TYPE=Ethernet 修改后保存配置后，运行 /etc/init.d/network restart 或者 service network restart 网络配置就改变了。 默认DNS的文件的位置为：/etc/resolv.conf #cat /etc/resolv.conf search test.com.cn nameserver 192.168.1.11 6、网络排错(1)、ping命令 功能：不说了，不知道就用干这行了。 ping (2)、traceroute命令 功能：路由跟踪 traceroute traceroute 207.68.173.7 (3)、nslookup命令 功能：域名解析排错 例如： $ nslookup Note: nslookup is deprecated and may be removed from future releases. Consider using the dig&#39; orhost’ programs instead. Run nslookup with the `-sil[ent]’ option to prevent this message from appearing. &gt; Server: 192.168.1.11 Address: 192.168.1.11#53 Non-authoritative answer: Name: Address: 202.118.66.66 server 202.118.66.6 Default server: 202.118.66.6 Address: 202.118.66.6#53 &gt; Server: 202.118.66.6 Address: 202.118.66.6#53 Non-authoritative answer: canonical name = . Name: Address: 202.108.22.5 九、其他命令1、ssh命令功能：远程登陆到其他UNIX主机 ssh -l user1 192.168.1.2 使用用户名user1登陆到192.168.1.2 ssh 使用用户名user1登陆到192.168.1.2 2、scp命令功能：安全copy 例如： scp abc.tar.gz :~ 将本地的abc.tar.gz 复制到 192.168.1.5的user1用户的根(/home/user1)下。 3、telnet命令功能：登陆到远程主机 例如： telnet 192.168.1.5","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://jacker.cc/tags/Linux/"}]},{"title":"垂直居中的N种实现","slug":"垂直居中的N种实现","date":"2018-01-12T17:23:47.000Z","updated":"2018-01-14T13:58:29.151Z","comments":true,"path":"2018/01/13/垂直居中的N种实现/","link":"","permalink":"http://jacker.cc/2018/01/13/垂直居中的N种实现/","excerpt":"","text":"关于垂直居中的问题，面试中经常问到，于是总结一下。 html代码如下：1234&lt;div class=\"parent\"&gt; &lt;div class=\"child\"&gt;我是子元素&lt;/div&gt;&lt;/div&gt;` 1. 不知道自己高度和父容器高度的情况下, 利用绝对定位 + transform, 只需要以下四行12345678910111213141516.parent &#123; width: 240px; height: 240px; background-color: rgb(189, 145, 229); position: relative;&#125;.child &#123; width: 100px; height: 100px; background-color: rgb(209, 125, 14); /* 不知道自己高度和父容器高度的情况下, 利用绝对定位只需要以下三行 */ position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125; 查看代码实例效果一 2. 若父容器下只有一个元素，且父元素设置了高度，则只需要使用相对定位即可1234567891011121314.parent &#123; width: 240px; height: 240px; background-color: rgb(189, 145, 229);&#125;.child &#123; width: 100px; background-color: rgb(209, 125, 14); /* 若父容器下只有一个元素，且父元素设置了高度，则只需要使用相对定位即可 */ position: relative; top: 50%; left: 50%; transform: translate(-50%, -50%);&#125; 查看代码实例效果二 3. 不考虑兼容老式浏览器的话，用Flex布局简单直观一劳永逸12345678910111213141516.parent &#123; width: 240px; height: 240px; background-color: rgb(189, 145, 229); /* 不考虑兼容老式浏览器的话，用Flex布局简单直观一劳永逸 */ display:flex;/* Flex布局 */ display: -webkit-flex; /* Safari */ align-items:center;/* 指定垂直居中 */&#125;.child &#123; width: 100px; background-color: rgb(209, 125, 14); margin: 0 auto; /* 水平居中 */&#125; 查看代码实例效果三 4. 子元素，父元素定高。 绝对定位 + top,right,bottom,left为0; margin为auto;12345678910111213141516171819202122.parent &#123; width: 240px; height: 240px; background-color: rgb(189, 145, 229); /* 父元素相对定位 */ position: relative;&#125;.child &#123; width: 100px; height: 100px; background-color: rgb(209, 125, 14); /* 子元素，父元素定高 */ /* 绝对定位加top,right,bottom,left为0; margin为auto; */ position:absolute; top:0; right:0; bottom:0; left:0; margin:auto;&#125; 查看代码实例效果四 5. 设置父元素display: table-cell + vertical-align: meddle 垂直居中1234567891011121314151617.parent &#123; width: 240px; height: 240px; background-color: rgb(189, 145, 229); /* 设置父元素display为table-cell */ display: table-cell; /* vertical-align: middle; 实现垂直居中 */ vertical-align: middle;&#125;.child &#123; width: 100px; height: 100px; background-color: rgb(209, 125, 14); /* 水平居中 */ margin:0 auto;&#125; 查看代码实例效果五","categories":[],"tags":[{"name":"css","slug":"css","permalink":"http://jacker.cc/tags/css/"}]},{"title":"使用hexo搭建博客，并使用github服务挂到自己域名","slug":"setup-hexo-blog","date":"2018-01-08T02:29:32.000Z","updated":"2018-01-14T14:04:43.873Z","comments":true,"path":"2018/01/08/setup-hexo-blog/","link":"","permalink":"http://jacker.cc/2018/01/08/setup-hexo-blog/","excerpt":"","text":"准备 安装node 安装git 以上两项不做详细介绍，请自己安装 安装hexo通过npm安装 hexo-cli 1$ npm install hexo-cli -g 创建hexo博客项目接下来创建放置博客文件的文件夹：hexo文件夹如我hexo文件夹的位置为G:\\Front_End_Web\\WorkSpaces\\Projects\\HEXO,名字和地方可以自由选择，最好不要放在中文路径下。 之后，进入文件夹，即G:\\Front_End_Web\\WorkSpaces\\Projects\\HEXO内，点击鼠标右键选择Git Bash（或者按住shift，点击鼠标右键选择“在此打开命令窗口”），执行以下命令。 初始化： $ hexo init 安装依赖： $ npm install 生成静态文件: $ hexo g 启动本地服务: $ hexo s 然后用浏览器访问http://localhost:4000/此时，你应该看到了一个漂亮的博客了，当然这个博客只是在本地的，别人是看不到的 【注】常用的hexo命令： $ hexo g #完整命令为hexo generate，用于生成静态文件$ hexo s #完整命令为hexo server，用于启动服务器，主要用来本地预览$ hexo d #完整命令为hexo deploy，用于将本地文件发布到github上$ hexo n #完整命令为hexo new，用于新建一篇文章 创建repositoryrepository相当于一个仓库，用来放置你的代码文件。首先，登陆进入Github，并进入个人页面，选择Repositories(下图第一个红圈的地方)，然后New一个repository(下图第二个红圈的地方) 创建时，只需要填写Repository name即可，当然这个名字的格式必须为youname.github.io，例如我的为huangjunhui.github.io，注意：此处的youname必须为你的github用户名，用户名是可以用来登陆的。 部署本地文件到github既然Repository已经创建了，当然是先把博客放到Github上去看看效果。编辑G:\\Front_End_Web\\WorkSpaces\\Projects\\HEXO下的_config.yml文件。在_config.yml最下方，添加如下配置(命令中的第一个huangjunhui为Github的用户名,第二个huangjunhui为之前New的Repository的名字,记得改成自己的。另外记得一点，hexo的配置文件中任何’:’后面都是带一个空格的) 如果配置以下命令出现ERROR Deployer not found : github，则需要安装一下hexo-deployer-git。$ npm install hexo-deployer-git –save 1234deploy: type: git repository: http://github.com/jackercc/jackercc.github.io.git branch: master 配置好_config.yml并保存后，执行以下命令部署到Github上。如果你是第一次使用Github或者是已经使用过，但没有配置过SSH，则可能需要配置一下，本文的另一种发布到github的配置一节有介绍。12$ hexo g$ hexo d 执行上面的第二个命令，可能会要你输入用户名和密码，皆为注册Github时的数据，输入密码是不显示任何东西的，输入完毕回车即可。此时，我们的博客已经搭建起来，并发布到Github上了，这时可以登陆自己的Github查看代码是否已经推送到对应Repository，在浏览器访问jackercc.github.io就能看到自己的博客了。第一次访问地址，可能访问不了，您可以在几分钟后进行访问，一般不超过10分钟。 github服务绑定自己的域名 在万网，腾讯云等提供域名注册的域名服务商处购买一个域名。 在你的域名管理有一个解析的选项，添加两条记录类型为CNAME的解析，一条主机记录为@，一条主机记录为www，记录值都为你的格式为http://xxxx.github.io的地址。 在你的本地hexo博客文件的source文件夹下创建一个CNAME文件，记住不要有文件后缀名。编辑CNAME文件，里面写你在第一步申请的域名，例如http://xxxx.cn，记住不要有www。 在你本地博客文件里运行hexo g，再运行hexo d。 在浏览器输入你申请的域名，你会发现该域名已经指向了你在github上的博客了。ps：设置域名解析需要几分钟的时间，完成以上步骤依然无法访问，请过几分钟再尝试访问。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://jacker.cc/tags/hexo/"}]},{"title":"测试博客","slug":"my-first-blog","date":"2018-01-07T17:19:20.000Z","updated":"2018-01-08T04:20:33.540Z","comments":true,"path":"2018/01/08/my-first-blog/","link":"","permalink":"http://jacker.cc/2018/01/08/my-first-blog/","excerpt":"","text":"测试文章 终于搞定了，哈哈，睡觉……","categories":[],"tags":[{"name":"test","slug":"test","permalink":"http://jacker.cc/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-01-07T11:07:24.324Z","updated":"2018-01-07T11:07:24.324Z","comments":true,"path":"2018/01/07/hello-world/","link":"","permalink":"http://jacker.cc/2018/01/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}